/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.mule.tooling.lang.dw.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.mule.tooling.lang.dw.parser.psi.WeaveTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_WeaveLexer.flex</tt>
 */
public class _WeaveLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 7, 2]
   * Total runtime size is 22368 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<7)|((ch>>2)&0x7f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\2\21\1\25\1\56\1\57\5\21\2\25\1\60\7\21"+
    "\1\61\1\62\20\21\1\25\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21\1\67\1\70"+
    "\1\71\1\72\10\21\1\73\2\21\1\74\10\21\123\25\1\75\7\25\1\76\1\77\12\61\1\100"+
    "\24\21\1\25\1\101\u0582\21\1\102\u017f\21");

  /* The ZZ_CMAP_Y table has 8576 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\10\0\1\34"+
    "\1\35\1\36\1\37\1\3\1\40\1\36\1\3\5\41\1\42\7\41\1\42\162\41\1\43\1\44\2\41"+
    "\1\43\3\3\1\41\1\45\1\3\1\46\4\3\34\0\1\41\1\47\1\44\1\50\1\3\1\36\1\42\1"+
    "\47\4\41\1\51\24\41\1\51\42\41\1\52\1\0\1\44\47\41\2\53\1\54\10\41\1\42\1"+
    "\40\1\3\1\54\11\41\1\3\1\55\1\56\12\0\1\57\1\60\1\57\2\3\6\41\1\42\1\3\1\42"+
    "\3\3\1\0\1\61\1\55\1\3\2\0\1\62\1\3\12\41\1\63\7\0\1\35\1\44\1\64\30\41\1"+
    "\65\1\0\1\57\1\0\1\66\1\67\1\70\2\0\1\70\1\71\3\3\1\55\1\72\7\41\6\0\1\62"+
    "\1\54\25\41\1\73\2\0\1\74\3\3\2\0\1\70\7\41\1\63\2\0\1\43\1\36\1\3\5\41\1"+
    "\73\1\75\2\0\2\76\1\35\4\3\6\41\1\76\21\3\1\77\2\41\1\100\1\53\1\101\13\3"+
    "\6\0\1\62\1\0\15\41\1\73\1\102\4\0\1\76\1\0\2\41\1\73\1\34\2\0\1\54\1\41\1"+
    "\103\1\41\1\104\1\54\1\41\2\71\5\41\1\47\1\41\1\46\1\44\1\43\1\102\1\0\2\105"+
    "\1\106\1\3\1\55\1\3\1\51\1\73\1\34\2\0\1\73\1\3\1\55\1\3\1\56\1\54\1\42\1"+
    "\107\1\71\5\41\1\47\1\41\1\47\1\110\1\43\1\67\1\62\1\55\1\105\1\35\1\37\1"+
    "\3\1\54\1\46\1\3\1\34\2\0\1\70\1\111\2\3\1\56\1\54\1\41\2\51\5\41\1\47\1\41"+
    "\1\47\1\54\1\43\1\102\1\0\2\57\1\35\1\45\3\3\1\73\1\34\2\0\1\37\1\3\1\112"+
    "\1\3\1\56\1\54\1\41\2\71\5\41\1\47\1\41\1\47\1\54\1\43\1\102\1\0\2\105\1\35"+
    "\1\3\1\34\1\3\1\51\1\73\1\34\2\0\1\40\3\3\1\113\1\54\1\42\1\44\1\47\1\43\1"+
    "\110\1\47\1\107\1\45\1\42\1\44\2\41\1\43\1\34\1\62\1\34\1\67\1\35\1\45\1\55"+
    "\3\3\1\34\2\0\2\3\1\37\1\3\1\56\1\54\1\41\2\47\5\41\1\47\2\41\1\103\1\43\1"+
    "\65\1\0\2\67\1\35\1\3\1\60\1\114\1\3\1\73\1\34\2\0\4\3\1\34\1\54\1\41\2\47"+
    "\5\41\1\47\2\41\1\54\1\43\1\102\1\0\2\67\1\35\1\3\1\60\1\3\1\36\1\73\1\34"+
    "\2\0\1\110\3\3\1\34\1\54\1\41\2\47\11\41\1\42\1\65\1\0\2\67\1\106\1\3\1\55"+
    "\1\3\1\115\1\73\1\34\2\0\2\3\1\44\1\41\1\34\1\54\3\41\1\42\1\44\5\41\1\51"+
    "\2\41\1\40\1\41\1\42\1\116\1\55\1\0\1\117\2\0\4\3\1\34\3\3\1\54\13\41\1\72"+
    "\1\0\1\62\1\55\1\41\1\63\1\0\1\62\2\0\1\35\11\3\1\110\1\71\1\46\1\40\1\3\1"+
    "\41\1\54\1\41\1\54\1\120\1\44\1\54\1\72\1\0\1\57\1\74\1\41\1\46\1\0\1\35\2"+
    "\0\1\35\1\41\10\3\1\45\5\3\1\35\1\3\2\0\1\35\2\3\1\121\1\37\1\34\2\41\1\54"+
    "\10\41\1\45\1\56\4\0\1\67\1\41\1\76\2\0\1\56\10\0\1\61\1\3\1\116\16\3\12\41"+
    "\1\63\4\0\1\122\2\0\1\35\1\3\1\41\1\73\1\70\1\73\1\102\1\66\1\0\1\70\1\76"+
    "\1\64\2\41\1\73\2\0\1\75\3\0\1\35\11\41\1\51\1\3\1\40\12\41\1\42\123\41\1"+
    "\47\1\43\1\41\1\42\1\47\1\43\12\41\1\47\1\43\10\41\1\47\1\43\1\41\1\42\1\47"+
    "\1\43\3\41\1\42\16\41\1\47\1\43\20\41\1\42\1\56\10\3\4\41\4\3\25\41\1\123"+
    "\1\53\1\124\1\54\232\41\1\71\4\41\1\54\5\41\1\42\1\3\22\41\1\42\1\34\1\125"+
    "\1\53\1\101\1\3\3\41\1\47\1\73\1\61\2\3\4\41\1\73\1\61\2\3\4\41\1\73\3\3\3"+
    "\41\1\47\1\126\3\3\15\41\10\0\1\107\1\55\1\111\2\0\1\35\7\3\1\55\1\35\2\0"+
    "\1\35\1\3\26\41\2\3\12\41\1\127\1\3\21\41\1\43\2\3\7\41\1\130\3\0\1\3\3\0"+
    "\2\3\1\34\2\0\7\41\1\43\1\41\1\45\2\3\13\41\1\3\6\41\1\43\1\3\2\0\1\35\11"+
    "\3\5\41\1\63\1\0\1\3\15\41\1\76\1\0\1\62\7\0\1\105\2\0\1\35\1\3\2\0\1\35\2"+
    "\3\1\107\26\3\1\0\1\64\13\41\4\0\1\64\1\41\1\3\2\0\1\35\3\3\1\55\2\0\3\3\1"+
    "\122\7\41\1\76\2\0\1\70\2\0\1\70\12\41\1\73\3\0\3\3\11\41\5\0\2\3\2\0\1\35"+
    "\1\54\2\0\1\70\10\41\1\43\24\3\1\62\5\0\1\64\1\72\1\73\1\131\2\3\60\41\11"+
    "\0\1\62\5\3\1\0\105\41\1\43\1\41\1\43\11\41\1\43\1\41\1\43\2\41\2\120\7\41"+
    "\1\43\15\41\1\47\1\41\1\46\1\44\1\47\1\41\1\45\1\41\1\44\1\41\1\3\3\41\1\45"+
    "\1\44\1\47\1\41\1\45\2\3\1\55\1\0\6\3\1\34\1\62\3\3\1\55\1\61\4\3\1\61\2\3"+
    "\1\0\1\61\1\34\1\0\1\40\2\3\1\107\4\3\3\41\1\45\6\0\1\62\5\3\3\0\1\61\1\37"+
    "\1\56\2\0\1\61\3\3\1\36\1\107\1\44\2\41\1\40\1\54\1\43\1\3\1\46\1\47\1\51"+
    "\2\41\1\43\1\41\1\3\1\54\1\43\1\36\4\3\10\0\1\122\1\76\1\61\235\3\13\41\1"+
    "\42\13\41\1\42\41\41\1\45\1\107\1\63\1\70\3\3\11\41\1\51\1\3\1\40\16\41\1"+
    "\3\1\107\3\3\1\55\5\41\1\42\2\3\1\41\1\42\1\41\1\42\1\41\1\42\1\41\1\42\1"+
    "\41\1\42\1\41\1\42\1\41\1\42\1\41\1\42\10\0\13\3\1\107\165\3\1\132\6\3\1\56"+
    "\3\0\1\54\1\43\1\122\1\45\1\54\24\41\1\42\1\60\2\54\25\41\1\42\1\41\1\3\1"+
    "\54\11\41\1\43\1\54\26\41\1\42\4\3\6\41\1\42\15\3\361\41\1\43\22\3\163\41"+
    "\1\100\1\53\1\124\12\3\43\41\1\45\20\3\13\41\1\43\103\41\1\45\4\41\2\0\1\70"+
    "\5\3\13\41\1\63\1\3\2\0\1\133\6\41\1\53\1\134\21\41\1\73\2\0\1\35\10\3\1\107"+
    "\2\41\1\44\31\41\1\71\1\135\1\41\3\53\2\41\1\135\1\124\2\53\17\3\1\115\2\41"+
    "\2\136\1\63\5\41\1\63\1\0\4\3\1\61\1\3\15\41\3\3\1\70\14\41\4\0\1\61\2\3\2"+
    "\0\1\35\1\3\4\0\1\70\1\41\1\107\1\112\2\0\1\70\6\41\1\73\1\0\1\35\5\41\1\63"+
    "\3\0\3\3\7\41\1\45\1\0\13\41\1\63\3\0\1\61\2\3\1\107\2\0\1\35\1\3\1\53\1\137"+
    "\2\53\2\3\1\140\1\141\12\41\1\76\2\0\1\62\2\3\1\63\2\41\1\35\2\0\1\35\1\3"+
    "\5\41\1\42\1\142\1\140\14\41\1\102\1\66\1\64\1\73\1\127\5\3\1\107\1\43\2\41"+
    "\1\63\1\0\1\44\1\143\2\3\1\54\1\42\1\54\1\42\1\54\1\42\2\3\1\41\1\42\1\41"+
    "\1\42\12\53\1\141\2\53\1\124\2\3\24\53\10\41\1\63\1\0\1\62\1\35\2\0\1\35\1"+
    "\3\151\41\3\3\5\41\1\42\1\107\14\41\101\3\133\41\1\43\32\41\1\43\11\3\1\41"+
    "\1\42\2\3\1\107\1\41\1\3\1\144\2\41\1\47\2\41\1\42\1\41\1\46\1\51\1\47\32"+
    "\41\1\43\7\3\1\107\132\41\1\43\4\3\20\41\1\44\15\41\12\3\3\41\1\61\4\0\4\3"+
    "\1\0\1\62\2\3\1\55\1\61\5\3\1\56\6\3\1\37\1\3\1\41\1\47\41\41\1\145\1\3\1"+
    "\61\2\3\2\0\1\35\1\3\1\54\5\41\1\42\1\55\1\54\5\41\1\42\2\3\1\44\25\41\1\42"+
    "\1\44\1\41\1\44\1\41\1\44\1\41\1\44\1\45\1\35\1\60\4\3\1\56\1\3\3\41\1\54"+
    "\5\41\1\42\4\41\1\42\1\51\3\41\1\43\3\41\1\43\10\3\36\41\1\42\21\3\15\0\1"+
    "\61\41\3\1\37\40\3\7\41\1\45\14\41\1\45\13\3\7\41\1\135\4\3\4\41\1\72\1\41"+
    "\1\146\1\3\11\53\1\124\2\3\7\41\1\43\11\41\1\3\2\41\1\56\1\35\12\3\47\41\1"+
    "\43\2\0\1\35\25\3\12\53\2\3\15\53\47\3\115\53\1\141\2\3\5\53\1\124\2\3\2\53"+
    "\46\3\1\41\1\43\1\47\12\41\1\51\1\45\1\71\5\41\1\43\2\3\5\53\1\141\2\3\7\53"+
    "\1\141\20\3\4\53\1\141\1\124\2\3\5\41\1\43\2\3\6\41\1\43\21\3\16\41\1\3\1"+
    "\44\20\3\1\76\1\60\1\3\1\0\1\41\2\54\6\41\1\3\1\62\1\55\10\3\7\41\1\45\7\53"+
    "\1\101\10\3\2\53\1\147\6\53\1\101\6\3\15\41\1\43\2\3\5\41\1\43\2\3\4\41\1"+
    "\42\3\3\4\53\1\124\33\3\22\41\1\45\15\3\14\53\1\141\3\3\14\53\1\141\103\3"+
    "\1\122\15\41\3\0\1\62\7\3\1\34\2\0\4\3\1\122\13\41\2\0\1\62\1\37\4\3\6\41"+
    "\1\45\1\3\2\0\1\35\1\3\1\122\10\41\1\63\3\0\1\67\2\0\4\3\10\53\1\141\1\150"+
    "\2\3\1\122\13\41\1\63\3\0\1\64\1\45\2\3\2\0\1\151\1\101\10\3\4\53\1\152\6"+
    "\53\25\3\1\53\1\141\1\137\1\152\3\53\1\152\2\53\1\101\1\3\13\53\1\141\11\3"+
    "\1\147\1\53\2\153\5\53\1\137\1\53\1\137\1\147\1\124\1\112\4\3\1\101\2\3\1"+
    "\147\1\124\107\3\14\53\5\3\1\152\56\3\13\53\1\141\12\3\1\53\11\3\14\53\5\3"+
    "\1\101\16\3\12\41\1\63\3\0\2\3\2\0\1\35\15\3\6\53\1\124\141\3\20\53\7\3\1"+
    "\115\160\3\16\53\1\101\101\3\133\41\1\135\12\53\1\124\31\3\30\0\1\62\7\3\61"+
    "\53\57\3\13\41\1\42\164\3\221\53\1\141\156\3\16\41\1\45\1\3\7\53\1\141\34"+
    "\3\7\53\1\124\4\3\14\53\4\3\1\53\7\3\1\115\5\53\1\3\1\147\4\53\134\3\21\41"+
    "\1\45\2\3\1\76\12\0\1\62\3\3\1\55\1\122\3\41\30\3\1\43\177\3\32\53\1\141\1"+
    "\3\3\53\1\101\2\53\1\101\1\3\2\53\1\124\262\3\1\56\1\35\1\56\4\0\1\62\1\56"+
    "\1\0\7\3\1\34\1\35\44\3\1\34\1\61\156\3\25\41\1\47\21\41\1\47\1\36\1\110\1"+
    "\54\1\47\2\41\1\51\1\54\1\41\1\54\17\41\1\51\1\42\1\54\1\41\1\47\1\41\1\47"+
    "\6\41\1\51\1\42\1\41\1\46\1\44\1\41\1\47\124\41\1\43\6\41\1\47\5\41\1\42\7"+
    "\41\1\42\6\41\1\47\7\41\1\47\5\41\1\42\7\41\1\42\6\41\1\47\7\41\1\47\5\41"+
    "\1\42\2\41\1\34\14\0\61\53\1\101\116\3\1\41\1\54\6\41\1\110\1\71\1\54\1\41"+
    "\1\42\1\41\1\120\1\3\1\36\1\107\1\120\1\54\1\110\1\71\2\120\1\110\1\71\1\42"+
    "\1\41\1\42\1\41\1\54\1\46\2\41\1\51\4\41\1\3\2\54\1\51\4\41\121\3\65\41\1"+
    "\42\12\3\215\41\1\45\2\3\67\41\1\43\240\53\1\124\127\3\7\41\1\43\170\3\1\37"+
    "\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 432 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\17\1\2\1\1\1\0\1\2\1\1\2\17\4\0\1\2\1\77\1\6\1\105\1\50\1\102\1\13\1\10"+
    "\1\64\1\65\1\5\1\56\1\70\1\57\1\3\1\4\1\60\11\52\1\12\1\0\1\75\1\100\1\76"+
    "\1\104\1\103\1\47\1\33\1\55\1\37\1\61\6\55\1\41\1\55\1\25\1\111\1\43\1\55"+
    "\1\31\1\21\1\40\1\46\5\55\1\62\1\7\1\63\1\106\1\20\1\0\1\36\1\27\1\42\1\44"+
    "\1\30\1\72\1\24\1\74\1\23\1\112\1\11\1\35\1\26\1\16\1\34\1\107\1\11\1\15\1"+
    "\71\1\22\1\14\1\110\1\73\1\32\1\45\1\11\1\66\1\51\1\67\1\101\1\17\2\0\4\17"+
    "\4\0\1\54\2\0\1\17\3\0\1\54\2\0\7\54\1\0\2\54\4\0\3\54\3\0\1\54\1\0\1\54\1"+
    "\0\1\54\1\0\4\54\1\0\1\53\2\54\1\0\3\54\1\0\1\17\4\53\1\0\3\54\3\0\1\17\1"+
    "\0\5\17\1\0\1\17\1\0\2\17\1\0\1\17\3\0\3\17\1\0\3\54\2\17\3\54\1\0\1\54\3"+
    "\17\2\54\2\17\1\0\4\17\3\54\2\0\2\54\1\17\4\54\3\17\1\54\2\0\2\17\1\54\1\17"+
    "\1\54\3\17\1\54\1\53\3\54\4\53\3\0\1\17\1\54\2\17\1\53\3\54\1\53\4\17\2\0"+
    "\3\17\1\54\4\0\1\54\1\0\2\54\1\0\1\54\1\17\3\0\1\53\4\0\1\17\3\54\1\53\4\0"+
    "\1\53\2\0\1\17\1\0\1\17\1\0\1\17\2\0\1\54\1\0\1\54\1\0\1\17\1\0\4\17\2\54"+
    "\1\53\2\0\2\53\2\0\1\17\3\53\1\54\1\0\2\17\1\54\1\17\1\54\1\0\1\54\2\53\1"+
    "\0\1\17\2\54\2\0\2\54\3\17\1\0\1\54\2\53\1\0\1\17\3\54\1\53\2\54\1\17\1\54"+
    "\1\53\1\0\2\53\2\0\5\53\3\0\1\54\1\17\1\54\2\17\2\0\1\54\1\17\2\54\2\0\1\17"+
    "\2\54\1\17\2\0\3\53\2\0\1\53\1\0\2\17\1\53\1\0\2\53\1\0\2\53\2\0\1\53");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\23\7\1\12\1\13\1\14\1\7\1\15"+
    "\1\16\1\14\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\7\1\26\1\27\1\30\1\31\1\1\1\32"+
    "\1\33\1\34\1\35\1\36\1\7\1\0\1\37\1\40"+
    "\1\0\1\5\2\0\1\6\2\0\1\7\1\0\1\41"+
    "\6\7\1\42\6\7\1\43\2\7\1\44\12\7\1\0"+
    "\1\45\2\46\2\14\1\0\1\47\4\0\2\7\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\7\0\1\7"+
    "\1\57\1\40\1\60\1\0\15\7\1\61\7\7\1\62"+
    "\1\7\1\63\1\46\1\64\1\0\2\7\1\65\5\0"+
    "\1\66\2\0\1\7\1\40\3\0\2\7\1\67\1\7"+
    "\1\70\6\7\1\62\1\71\1\7\1\72\3\7\1\0"+
    "\1\7\1\73\6\0\1\74\1\7\2\75\1\7\1\76"+
    "\2\7\1\77\6\7\1\100\3\0\1\101\1\0\1\102"+
    "\4\0\1\7\1\103\4\7\1\104\1\0\1\105\3\0"+
    "\1\106\2\7\1\107\1\0\1\110\1\111\1\0\2\7"+
    "\2\0\1\112\1\7\1\0\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\113\0\u012c\0\u0177\0\u01c2"+
    "\0\113\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf"+
    "\0\u041a\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627"+
    "\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f"+
    "\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\113\0\113\0\113"+
    "\0\113\0\113\0\113\0\u0a41\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u0c03\0\u0c4e\0\113\0\113\0\113\0\113\0\u0c99"+
    "\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\113\0\u0e10\0\u0e5b\0\113"+
    "\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\113\0\u0fd2\0\u101d\0\u1068"+
    "\0\u10b3\0\u10fe\0\u1149\0\u01c2\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u01c2\0\u1356\0\u13a1\0\u01c2\0\u13ec\0\u1437"+
    "\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\113\0\u1725\0\u1770\0\u17bb\0\113\0\u1806\0\113"+
    "\0\u09ab\0\u1851\0\u189c\0\u18e7\0\u1932\0\u197d\0\113\0\113"+
    "\0\u19c8\0\113\0\113\0\113\0\113\0\u1a13\0\u1a5e\0\u1aa9"+
    "\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\113\0\u1c6b\0\u1cb6"+
    "\0\u1d01\0\u1d4c\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e"+
    "\0\u1f59\0\u1fa4\0\u1fef\0\u203a\0\u2085\0\u20d0\0\u01c2\0\u211b"+
    "\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u08ca\0\u2328"+
    "\0\113\0\u2373\0\113\0\u23be\0\u2409\0\u2454\0\113\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\113\0\u2616\0\u2661\0\u26ac"+
    "\0\113\0\u1c6b\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u01c2\0\u2823"+
    "\0\u01c2\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5\0\u2a30"+
    "\0\u08ca\0\u2a7b\0\u01c2\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7\0\u2bf2"+
    "\0\u01c2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\113"+
    "\0\u2dff\0\u26f7\0\u2e4a\0\u2e95\0\u01c2\0\u2ee0\0\u2f2b\0\u01c2"+
    "\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u08ca\0\u3138"+
    "\0\u3183\0\u31ce\0\u01c2\0\u3219\0\113\0\u3264\0\u32af\0\u32fa"+
    "\0\u3345\0\u3390\0\u01c2\0\u33db\0\u3426\0\u3471\0\u34bc\0\113"+
    "\0\u3507\0\113\0\u3552\0\u359d\0\u35e8\0\u08ca\0\u3633\0\u367e"+
    "\0\u01c2\0\u36c9\0\113\0\113\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u01c2\0\u2a30\0\u388b\0\113\0\113";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\10\1\14\2\2\1\15"+
    "\1\16\1\17\1\10\1\20\1\21\2\10\1\22\1\10"+
    "\1\23\1\24\1\10\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\10\1\34\1\35\1\36\1\37\1\40"+
    "\3\41\1\42\1\43\1\44\1\41\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\10\1\54\1\55\1\10"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\2\10\1\70\1\10\114\0\2\3\110\0"+
    "\1\71\1\0\2\71\1\72\1\73\1\71\1\74\103\71"+
    "\1\6\1\0\4\6\1\75\1\76\103\6\1\7\1\0"+
    "\5\7\1\77\1\100\102\7\4\0\1\101\4\0\1\10"+
    "\1\102\1\0\3\10\2\103\1\41\3\10\1\41\3\10"+
    "\1\41\1\10\1\41\3\10\3\41\1\10\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\13\0"+
    "\1\105\103\0\1\101\4\0\1\10\1\102\1\0\1\10"+
    "\1\106\1\107\2\103\1\41\3\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\1\110\3\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\1\111\2\10\2\103"+
    "\1\41\3\10\1\41\3\10\1\41\1\10\1\41\3\10"+
    "\3\41\1\10\1\41\2\10\2\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\10\12\0"+
    "\2\10\1\41\1\10\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\1\41\1\112\25\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\4\0\1\101\4\0\1\10\1\102\1\0\1\10"+
    "\1\113\1\10\2\103\1\41\3\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\10\1\102\1\0\3\10\2\103\1\41\3\10"+
    "\1\41\3\10\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\1\114\3\10\12\0\2\10"+
    "\1\41\1\10\4\0\1\101\4\0\1\41\2\0\1\115"+
    "\2\41\2\103\27\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\3\10\1\41\1\10\1\41\2\10\1\116"+
    "\3\41\1\10\1\41\2\10\2\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\10\12\0"+
    "\2\10\1\41\1\10\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\7\41\1\117\5\41\1\120\11\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\2\41\1\121\10\41\1\122\13\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\10\1\102"+
    "\1\0\1\10\1\123\1\10\2\103\1\41\1\124\2\10"+
    "\1\41\3\10\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\10\12\0\2\10\1\41"+
    "\1\10\4\0\1\101\4\0\1\10\1\102\1\0\2\10"+
    "\1\125\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\1\126\3\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\15\41\1\127\11\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\2\41\1\130\21\41\1\131\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\13\41\1\132\13\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\2\10\1\133\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\7\41\1\134\17\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\10"+
    "\1\102\1\0\3\10\2\103\1\41\3\10\1\41\2\10"+
    "\1\135\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\10\12\0\2\10\1\41\1\10"+
    "\4\0\1\101\4\0\1\41\2\0\1\41\1\136\1\41"+
    "\2\103\27\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\4\0\1\101"+
    "\4\0\1\41\2\0\1\41\1\137\1\140\2\103\27\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\50\0\1\36\42\0\1\141"+
    "\1\0\47\141\1\142\41\141\3\0\1\143\24\0\1\144"+
    "\21\0\1\40\5\0\1\40\1\144\35\0\1\101\4\0"+
    "\1\41\2\0\3\41\2\103\27\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\52\0\1\145\5\0\1\146\104\0\1\145\4\0"+
    "\1\147\1\146\15\0\1\150\17\0\1\143\24\0\1\144"+
    "\21\0\1\151\5\0\1\151\1\144\103\0\1\152\3\0"+
    "\2\153\1\154\36\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\2\10\1\155\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\10\1\102\1\0\3\10\2\103\1\41\3\10"+
    "\1\41\3\10\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\3\10\1\156\12\0\2\10"+
    "\1\41\1\10\75\0\1\157\2\0\1\160\110\0\1\161"+
    "\1\0\1\162\112\0\1\163\112\0\1\164\112\0\1\165"+
    "\30\0\1\166\3\0\1\167\1\170\10\0\1\171\7\0"+
    "\1\172\25\0\1\173\15\0\1\174\6\0\1\101\4\0"+
    "\1\41\2\0\3\41\2\103\6\41\1\175\20\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\1\71\1\0\2\71\1\176\2\71"+
    "\1\74\103\71\1\72\1\0\111\72\5\73\1\177\105\73"+
    "\1\71\1\0\111\71\1\6\1\0\111\6\1\7\1\0"+
    "\111\7\4\0\1\101\4\0\1\200\2\0\3\200\2\0"+
    "\27\200\3\0\3\200\3\0\1\200\7\0\4\200\12\0"+
    "\4\200\4\0\1\201\117\0\1\103\2\0\35\103\1\0"+
    "\1\103\1\0\2\103\2\0\2\103\7\0\4\103\12\0"+
    "\4\103\4\0\1\101\4\0\1\104\2\0\3\104\2\0"+
    "\27\104\3\0\3\104\3\0\1\104\7\0\4\104\12\0"+
    "\4\104\4\0\1\101\4\0\1\10\1\102\1\0\2\10"+
    "\1\202\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\10\12\0\2\10\1\41\1\10\4\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\1\10\1\203\1\10\3\41"+
    "\1\10\1\41\2\10\2\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\4\10\12\0\2\10"+
    "\1\41\1\10\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\1\10\1\204\1\10\1\41\3\10"+
    "\1\41\1\10\1\41\3\10\3\41\1\10\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\3\10\1\41\1\10\1\41\1\10\1\205"+
    "\1\10\3\41\1\10\1\41\2\10\2\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\10"+
    "\12\0\2\10\1\41\1\10\4\0\1\101\4\0\1\41"+
    "\2\0\1\41\1\206\1\41\2\103\27\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\1\207\2\10\2\103\1\41\3\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\5\41\1\210\21\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\10"+
    "\1\102\1\0\3\10\2\103\1\41\1\211\2\10\1\41"+
    "\3\10\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\10\12\0\2\10\1\41\1\10"+
    "\4\0\1\101\4\0\1\41\2\0\3\41\2\103\3\41"+
    "\1\212\23\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\4\0\1\101"+
    "\4\0\1\41\2\0\2\41\1\213\2\103\27\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\41\2\0"+
    "\2\41\1\214\2\103\27\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\4\41\12\0\4\41"+
    "\4\0\1\101\4\0\1\41\2\0\3\41\2\103\13\41"+
    "\1\215\13\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\4\0\1\101"+
    "\4\0\1\10\1\102\1\0\3\10\2\103\1\41\3\10"+
    "\1\41\3\10\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\3\10\1\216\12\0\2\10"+
    "\1\41\1\10\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\1\217\1\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\1\41\1\220\25\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\5\41\1\221\21\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\41\2\0\3\41"+
    "\2\103\27\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\1\222\3\41\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\21\41\1\223"+
    "\5\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\1\224\3\10\12\0\2\10\1\41"+
    "\1\10\4\0\1\101\4\0\1\41\2\0\1\41\1\225"+
    "\1\41\2\103\27\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\3\10\1\41\1\10\1\41\3\10\3\41"+
    "\1\10\1\41\2\10\2\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\1\10\1\226\2\10"+
    "\12\0\2\10\1\41\1\10\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\2\41\1\227\24\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\41\2\0\1\41"+
    "\1\230\1\41\2\103\27\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\4\41\12\0\4\41"+
    "\4\0\1\101\4\0\1\41\2\0\3\41\2\103\24\41"+
    "\1\227\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\1\141\1\0"+
    "\47\141\1\231\41\141\30\0\1\144\21\0\1\143\5\0"+
    "\1\143\1\144\103\0\1\232\3\0\3\232\104\0\1\145"+
    "\5\0\1\145\111\0\1\233\36\0\1\234\46\0\1\152"+
    "\5\0\1\152\104\0\1\152\5\0\1\154\35\0\1\234"+
    "\113\0\1\101\4\0\1\10\1\102\1\0\3\10\2\103"+
    "\1\41\3\10\1\41\3\10\1\41\1\10\1\41\1\10"+
    "\1\235\1\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\10\12\0\2\10\1\41\1\10\4\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\2\10\1\236\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\10\12\0\2\10\1\41"+
    "\1\10\76\0\1\237\52\0\1\240\121\0\1\241\63\0"+
    "\1\242\7\0\1\243\100\0\1\244\171\0\1\245\33\0"+
    "\1\246\134\0\1\247\60\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\27\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\3\41\1\250"+
    "\4\73\1\251\1\252\105\73\11\0\1\200\2\0\3\200"+
    "\2\0\27\200\3\0\3\200\3\0\1\200\7\0\4\200"+
    "\12\0\4\200\4\0\1\253\112\0\1\101\4\0\1\10"+
    "\1\254\1\0\3\10\2\103\1\41\3\10\1\41\3\10"+
    "\1\41\1\10\1\41\3\10\3\41\1\10\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\2\10\1\255\1\41\1\10\1\41\3\10"+
    "\3\41\1\10\1\41\2\10\2\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\10\12\0"+
    "\2\10\1\41\1\10\4\0\1\101\4\0\1\10\1\102"+
    "\1\0\2\10\1\256\2\103\1\41\3\10\1\41\3\10"+
    "\1\41\1\10\1\41\3\10\3\41\1\10\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\3\10\1\41\1\10\1\41\1\10\1\257"+
    "\1\10\3\41\1\10\1\41\2\10\2\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\10"+
    "\12\0\2\10\1\41\1\10\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\2\41\1\260\24\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\3\10\1\41\2\10\1\261\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\6\41\1\262\20\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\10"+
    "\1\102\1\0\3\10\2\103\1\41\3\10\1\41\3\10"+
    "\1\41\1\10\1\41\3\10\3\41\1\263\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\7\41\1\264"+
    "\17\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\41\2\0\3\41\2\103\3\41\1\221\23\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\15\41\1\265\11\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\4\0\1\101\4\0\1\41\2\0\3\41\2\103"+
    "\14\41\1\266\12\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\3\10\1\41\2\10\1\267\1\41\1\10\1\41\3\10"+
    "\3\41\1\10\1\41\2\10\2\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\10\12\0"+
    "\2\10\1\41\1\10\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\7\41\1\270\17\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\4\0\1\101\4\0\1\41\2\0\3\41\2\103"+
    "\7\41\1\227\17\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\7\41\1\271"+
    "\17\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\41\2\0\3\41\2\103\15\41\1\272\11\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\10\1\102"+
    "\1\0\3\10\2\103\1\41\3\10\1\41\2\10\1\273"+
    "\1\41\1\10\1\41\3\10\3\41\1\10\1\41\2\10"+
    "\2\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\2\41\1\274"+
    "\24\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\2\10\1\275\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\10\12\0\2\10\1\41"+
    "\1\10\4\0\1\101\4\0\1\41\2\0\3\41\2\103"+
    "\15\41\1\276\11\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\52\0"+
    "\1\232\5\0\1\232\35\0\1\277\113\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\1\300\3\10\12\0\2\10\1\41"+
    "\1\10\4\0\1\101\4\0\1\10\1\102\1\0\2\10"+
    "\1\301\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\10\12\0\2\10\1\41\1\10\26\0\1\302\173\0"+
    "\1\303\112\0\1\304\112\0\1\305\25\0\1\306\106\0"+
    "\1\307\111\0\1\310\101\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\7\41\1\311\17\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\3\0\2\312\4\0\6\312\1\0\30\312\2\0"+
    "\1\312\2\0\1\312\1\0\3\312\7\0\4\312\3\0"+
    "\1\312\3\0\1\312\2\0\4\312\3\0\1\313\1\201"+
    "\4\0\6\313\1\0\30\313\2\0\1\313\2\0\1\313"+
    "\1\0\3\313\7\0\4\313\3\0\1\313\3\0\1\313"+
    "\2\0\4\313\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\3\10\1\41\3\10\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\1\314\3\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\10\1\102\1\0\3\10\2\103\1\41\2\10"+
    "\1\315\1\41\3\10\1\41\1\10\1\41\3\10\3\41"+
    "\1\10\1\41\2\10\2\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\4\10\12\0\2\10"+
    "\1\41\1\10\4\0\1\101\4\0\1\41\2\0\2\41"+
    "\1\316\2\103\27\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\7\41\1\317"+
    "\17\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\10\1\102\1\0\3\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\3\10\1\320\12\0\2\10\1\41"+
    "\1\10\4\0\1\101\4\0\1\41\2\0\3\41\2\103"+
    "\11\41\1\227\15\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\41\2\0\1\41\1\140\1\41\2\103"+
    "\27\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\41\2\0\3\41\2\103\7\41\1\321\17\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\10\1\102"+
    "\1\0\1\10\1\322\1\10\2\103\1\41\3\10\1\41"+
    "\3\10\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\10\12\0\2\10\1\41\1\10"+
    "\4\0\1\101\4\0\1\41\2\0\3\41\2\103\17\41"+
    "\1\323\7\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\14\41\1\324\12\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\13\41\1\325\13\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\1\326\2\10\2\103\1\41\3\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\24\41\1\327\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\52\0\1\330\3\0\2\331"+
    "\1\332\36\0\1\101\4\0\1\10\1\102\1\0\3\10"+
    "\2\103\1\41\3\10\1\41\2\10\1\333\1\41\1\10"+
    "\1\41\3\10\3\41\1\10\1\41\2\10\2\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\10\12\0\2\10\1\41\1\10\30\0\1\334\112\0"+
    "\1\335\76\0\1\336\132\0\1\337\165\0\1\340\45\0"+
    "\1\341\54\0\1\101\4\0\1\41\2\0\3\41\2\103"+
    "\21\41\1\342\5\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\3\0"+
    "\1\313\5\0\6\313\1\0\30\313\2\0\1\313\2\0"+
    "\1\313\1\0\3\313\7\0\4\313\3\0\1\313\3\0"+
    "\1\313\2\0\4\313\4\0\1\101\4\0\1\10\1\102"+
    "\1\0\3\10\2\103\1\41\3\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\1\343\3\10\12\0\2\10\1\41\1\10\4\0"+
    "\1\101\4\0\1\41\2\0\3\41\2\103\3\41\1\227"+
    "\23\41\1\103\1\0\1\103\1\104\2\41\2\0\1\103"+
    "\1\41\7\0\4\41\12\0\4\41\4\0\1\101\4\0"+
    "\1\41\2\0\1\41\1\227\1\41\2\103\27\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\15\41\1\344\11\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\4\0\1\101\4\0\1\10\1\102\1\0\3\10"+
    "\2\103\1\41\3\10\1\41\3\10\1\41\1\10\1\41"+
    "\3\10\3\41\1\10\1\41\2\10\2\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\2\10"+
    "\1\345\1\10\12\0\2\10\1\41\1\10\4\0\1\101"+
    "\4\0\1\41\2\0\3\41\2\103\2\41\1\130\24\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\41\12\0\4\41\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\16\41\1\346\1\323\7\41\1\103"+
    "\1\0\1\103\1\104\2\41\2\0\1\103\1\41\7\0"+
    "\4\41\12\0\4\41\4\0\1\101\4\0\1\41\2\0"+
    "\3\41\2\103\23\41\1\227\3\41\1\103\1\0\1\103"+
    "\1\104\2\41\2\0\1\103\1\41\7\0\4\41\12\0"+
    "\4\41\4\0\1\101\4\0\1\10\1\102\1\0\3\10"+
    "\2\103\1\41\3\10\1\41\3\10\1\41\1\10\1\41"+
    "\1\10\1\347\1\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\52\0\1\330"+
    "\5\0\1\330\2\0\1\350\101\0\1\330\5\0\1\332"+
    "\115\0\1\350\120\0\1\351\43\0\1\352\105\0\1\353"+
    "\111\0\1\354\120\0\1\355\74\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\1\41\1\356\25\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\41\2\0\2\41"+
    "\1\227\2\103\27\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\4\41\12\0\4\41\4\0"+
    "\1\101\4\0\1\10\1\102\1\0\3\10\2\103\1\41"+
    "\1\10\1\357\1\10\1\41\3\10\1\41\1\10\1\41"+
    "\3\10\3\41\1\10\1\41\2\10\2\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\10"+
    "\12\0\2\10\1\41\1\10\4\0\1\101\4\0\1\41"+
    "\2\0\3\41\2\103\15\41\1\360\11\41\1\103\1\0"+
    "\1\103\1\104\2\41\2\0\1\103\1\41\7\0\4\41"+
    "\12\0\4\41\4\0\1\101\4\0\1\10\1\102\1\0"+
    "\3\10\2\103\1\41\1\361\2\10\1\41\3\10\1\41"+
    "\1\10\1\41\3\10\3\41\1\10\1\41\2\10\2\41"+
    "\1\103\1\0\1\103\1\104\2\41\2\0\1\103\1\41"+
    "\7\0\4\10\12\0\2\10\1\41\1\10\107\0\1\362"+
    "\25\0\1\363\112\0\1\364\113\0\1\365\73\0\1\101"+
    "\4\0\1\10\1\102\1\0\3\10\2\103\1\41\3\10"+
    "\1\41\3\10\1\41\1\10\1\41\3\10\3\41\1\10"+
    "\1\41\2\10\2\41\1\103\1\0\1\103\1\104\2\41"+
    "\2\0\1\103\1\41\7\0\1\366\3\10\12\0\2\10"+
    "\1\41\1\10\4\0\1\101\4\0\1\41\2\0\3\41"+
    "\2\103\1\41\1\367\25\41\1\103\1\0\1\103\1\104"+
    "\2\41\2\0\1\103\1\41\7\0\4\41\12\0\4\41"+
    "\36\0\1\370\110\0\1\371\62\0\1\101\4\0\1\10"+
    "\1\102\1\0\3\10\2\103\1\41\3\10\1\41\2\10"+
    "\1\372\1\41\1\10\1\41\3\10\3\41\1\10\1\41"+
    "\2\10\2\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\10\12\0\2\10\1\41\1\10"+
    "\4\0\1\101\4\0\1\41\2\0\3\41\2\103\7\41"+
    "\1\373\17\41\1\103\1\0\1\103\1\104\2\41\2\0"+
    "\1\103\1\41\7\0\4\41\12\0\4\41\42\0\1\374"+
    "\66\0\1\375\124\0\1\376\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\34\1\6\11"+
    "\10\1\4\11\1\1\1\0\2\1\1\0\1\11\2\0"+
    "\1\11\2\0\1\1\1\0\1\11\33\1\1\0\1\11"+
    "\3\1\1\11\1\0\1\11\4\0\2\1\2\11\1\1"+
    "\4\11\7\0\1\1\1\11\2\1\1\0\27\1\1\11"+
    "\1\1\1\11\1\0\2\1\1\11\5\0\1\11\2\0"+
    "\1\1\1\11\3\0\22\1\1\0\2\1\6\0\1\11"+
    "\17\1\3\0\1\1\1\0\1\11\4\0\6\1\1\11"+
    "\1\0\1\11\3\0\4\1\1\0\2\11\1\0\2\1"+
    "\2\0\2\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WeaveLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WeaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 77: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 78: break;
          case 3: 
            { return DIVISION;
            }
          case 79: break;
          case 4: 
            { return MULTIPLY;
            }
          case 80: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            }
          case 81: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            }
          case 82: break;
          case 7: 
            { return ID;
            }
          case 83: break;
          case 8: 
            { return COLON;
            }
          case 84: break;
          case 9: 
            { return AND;
            }
          case 85: break;
          case 10: 
            { return DOLLAR_VARIABLE;
            }
          case 86: break;
          case 11: 
            { return OR;
            }
          case 87: break;
          case 12: 
            { return INTEGER_LITERAL;
            }
          case 88: break;
          case 13: 
            { return PLUS;
            }
          case 89: break;
          case 14: 
            { return MINUS;
            }
          case 90: break;
          case 15: 
            { return L_BRACKET;
            }
          case 91: break;
          case 16: 
            { return R_BRACKET;
            }
          case 92: break;
          case 17: 
            { return L_PARREN;
            }
          case 93: break;
          case 18: 
            { return R_PARREN;
            }
          case 94: break;
          case 19: 
            { return L_CURLY;
            }
          case 95: break;
          case 20: 
            { return R_CURLY;
            }
          case 96: break;
          case 21: 
            { return COMMA;
            }
          case 97: break;
          case 22: 
            { return LESS;
            }
          case 98: break;
          case 23: 
            { return GREATER;
            }
          case 99: break;
          case 24: 
            { return ESCLAMATION;
            }
          case 100: break;
          case 25: 
            { return EQ;
            }
          case 101: break;
          case 26: 
            { return MODULO;
            }
          case 102: break;
          case 27: 
            { return AT;
            }
          case 103: break;
          case 28: 
            { return QUESTION;
            }
          case 104: break;
          case 29: 
            { return HASH;
            }
          case 105: break;
          case 30: 
            { return XOR;
            }
          case 106: break;
          case 31: 
            { return LINE_COMMENT;
            }
          case 107: break;
          case 32: 
            { return MULTILINE_COMMENT;
            }
          case 108: break;
          case 33: 
            { return AND_AND;
            }
          case 109: break;
          case 34: 
            { return IS;
            }
          case 110: break;
          case 35: 
            { return OR_KEYWORD;
            }
          case 111: break;
          case 36: 
            { return AS;
            }
          case 112: break;
          case 37: 
            { return OR_OR;
            }
          case 113: break;
          case 38: 
            { return DOUBLE_LITERAL;
            }
          case 114: break;
          case 39: 
            { return ARROW_TOKEN;
            }
          case 115: break;
          case 40: 
            { return SHIFT_LEFT;
            }
          case 116: break;
          case 41: 
            { return LESS_EQUAL;
            }
          case 117: break;
          case 42: 
            { return SHIFT_RIGHT;
            }
          case 118: break;
          case 43: 
            { return GREATER_EQUAL;
            }
          case 119: break;
          case 44: 
            { return NOT_EQUAL;
            }
          case 120: break;
          case 45: 
            { return EQUAL;
            }
          case 121: break;
          case 46: 
            { return SIMILAR;
            }
          case 122: break;
          case 47: 
            { return RULE_ANY_REGEX;
            }
          case 123: break;
          case 48: 
            { return RULE_MIME_TYPE;
            }
          case 124: break;
          case 49: 
            { return AND_KEYWORD;
            }
          case 125: break;
          case 50: 
            { return SIMPLE_TYPE_LITERAL;
            }
          case 126: break;
          case 51: 
            { return RULE_ANY_DATE;
            }
          case 127: break;
          case 52: 
            { return DOCUMENT_SEPARATOR;
            }
          case 128: break;
          case 53: 
            { return SHIFT_RIGHT_LOGICAL;
            }
          case 129: break;
          case 54: 
            { return VERSION_DIRECTIVE_KEYWORD;
            }
          case 130: break;
          case 55: 
            { return RULE_NULL_LITERAL;
            }
          case 131: break;
          case 56: 
            { return TRUE_LITERAL;
            }
          case 132: break;
          case 57: 
            { return TYPE_KEYWORD;
            }
          case 133: break;
          case 58: 
            { return CASE_KEYWORD;
            }
          case 134: break;
          case 59: 
            { return WHEN;
            }
          case 135: break;
          case 60: 
            { return VAR_DIRECTIVE_KEYWORD;
            }
          case 136: break;
          case 61: 
            { return NAMESPACE_URI;
            }
          case 137: break;
          case 62: 
            { return USING;
            }
          case 138: break;
          case 63: 
            { return RULE_MATCH_LITERAL;
            }
          case 139: break;
          case 64: 
            { return ARRAY_KEYWORD;
            }
          case 140: break;
          case 65: 
            { return FALSE_LITERAL;
            }
          case 141: break;
          case 66: 
            { return TYPE_DIRECTIVE_KEYWORD;
            }
          case 142: break;
          case 67: 
            { return UNLESS;
            }
          case 143: break;
          case 68: 
            { return RULE_RANGE_LITERAL;
            }
          case 144: break;
          case 69: 
            { return INPUT_DIRECTIVE_KEYWORD;
            }
          case 145: break;
          case 70: 
            { return OBJECT_KEYWORD;
            }
          case 146: break;
          case 71: 
            { return DEFAULT;
            }
          case 147: break;
          case 72: 
            { return IMPORT_DIRECTIVE_KEYWORD;
            }
          case 148: break;
          case 73: 
            { return OUTPUT_DIRECTIVE_KEYWORD;
            }
          case 149: break;
          case 74: 
            { return OTHERWISE;
            }
          case 150: break;
          case 75: 
            { return FUNCTION_DIRECTIVE_KEYWORD;
            }
          case 151: break;
          case 76: 
            { return NAMESPACE_DIRECTIVE_KEYWORD;
            }
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
