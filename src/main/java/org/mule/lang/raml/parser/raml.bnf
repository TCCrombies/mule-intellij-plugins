{
  parserClass="org.mule.lang.raml.parser.RamlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Raml"
  psiImplClassSuffix="Impl"
  psiPackage="org.mule.lang.raml.parser.psi"
  psiImplPackage="org.mule.lang.raml.parser.impl"

  elementTypeHolderClass="org.mule.lang.raml.parser.psi.RamlTypes"
  elementTypeClass="org.mule.lang.raml.parser.RamlElementType"
  tokenTypeClass="org.mule.lang.raml.parser.RamlTokenType"

  psiImplUtilClass="org.mule.lang.raml.parser.psi.RamlPsiImplUtil"
}
// Identity definitions
whitespace ::= " " | "\t"
in_line_whitespace ::= whitespace | whitespace in_line_whitespace
digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
integer_number ::= digit | digit integer_number
end_of_line ::= "\r\n" | "\r" | "\n"
non_whitespace ::=
non_whitespace_word ::= non_whitespace | non_whitespace non_whitespace_word

raml_comment ::= "#" *xchar

// Basic document structure
raml_stream ::= raml_document_list
raml_document_list ::= raml_document | raml_document raml_document_list
raml_document ::= raml_directive_list raml_directives_end raml_content_list raml_document_end
raml_directive_list ::= raml_directive raml_directive_list | ""
raml_directive ::= raml_directive_raml | raml_directive_tag

raml_directive_raml ::= "#%RAML" in_line_whitespace integer_number "." integer_number end_of_line | ""
raml_directive_tag ::= "#%TAG" in_line_whitespace raml_tag_handle in_line_whitespace raml_tag_prefix end_of_line raml_directive_tag | ""

raml_tag_handle ::= "!" | "!!" | "!" non_whitespace_word "!"
raml_tag_prefix ::= "!" non_whitespace_word | non_whitespace_word
raml_directives_end ::= "---" | ""
raml_content_list ::= raml_content raml_content_list | raml_content end_of_line
raml_document_end ::= "..." | ""


// RAML specific keywords
raml_title ::= "title:" *xchar
raml_version ::= "version:"
raml_protocols ::= "[" "HTTP" | "HTTPS" | "HTTP, HTTPS" "]"
raml_base_uri ::= "baseUri:" url
raml_secured_by ::= "securedBy:" "[" *xchar [{"," *xchar}] "]"
raml_security_schemes ::= "securitySchemes:"
raml_resource_types ::= "resourceTypes:"
raml_traits ::= "traits:"
raml_media_type ::= "mediaType:" mimetype
raml_schemas ::= "schemas:"

raml_resource ::= hpath
// Internals of an individual document
raml_content ::= raml_title [raml_base_uri] [raml_version] [raml_protocols] [raml_secured_by] [raml_security_schemes] [raml_resource_types] [raml_traits] [raml_media_type] [raml_schemas] [*raml_resource]


////////////////
// The generic form of a URL is:

genericurl     ::= scheme ":" schemepart

// Specific predefined schemes are defined here// new schemes
// may be registered with IANA

url            ::= httpurl | httpsurl | otherurl


// new schemes follow the general syntax
otherurl       ::= genericurl

// the scheme is in lower case// interpreters should use case-ignore
scheme         ::= 1*[ lowalpha | digit | "+" | "-" | "." ]
schemepart     ::= *xchar | ip_schemepart

// URL schemeparts for ip based protocols:

ip_schemepart  ::= "//" login [ "/" urlpath ]

login          ::= [ user [ ":" password ] "@" ] hostport
hostport       ::= host [ ":" port ]
host           ::= hostname | hostnumber
hostname       ::= *[ domainlabel "." ] toplabel
domainlabel    ::= alphadigit | alphadigit *[ alphadigit | "-" ] alphadigit
toplabel       ::= alpha | alpha *[ alphadigit | "-" ] alphadigit
alphadigit     ::= alpha | digit
hostnumber     ::= digits "." digits "." digits "." digits
port           ::= digits
user           ::= *[ uchar | ";" | "?" | "&" | "=" ]
password       ::= *[ uchar | ";" | "?" | "&" | "=" ]
urlpath        ::= *xchar

// HTTP

httpurl        ::= "http://" hostport [ "/" hpath [ "?" search ]]
httpsurl       ::= "https://" hostport [ "/" hpath [ "?" search ]]
hpath          ::= hsegment *[ "/" hsegment ]
hsegment       ::= *[ uchar | ";" | ":" | "@" | "&" | "=" ]
search         ::= *[ uchar | ";" | ":" | "@" | "&" | "=" ]

lowalpha       ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" |
                 "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" |
                 "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" |
                 "y" | "z"
hialpha        ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
                 "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                 "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
alpha          ::= lowalpha | hialpha
digit          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                 "8" | "9"
safe           ::= "$" | "-" | "_" | "." | "+"
extra          ::= "!" | "*" | "'" | "(" | ")" | ","
national       ::= "{" | "}" | "|" | "\\" | "^" | "~" | "[" | "]" | "`"
punctuation    ::= "<" | ">" | "#" | "%"

reserved       ::= ";" | "/" | "?" | ":" | "@" | "&" | "="
hex            ::= digit | "A" | "B" | "C" | "D" | "E" | "F" |
                 "a" | "b" | "c" | "d" | "e" | "f"
escape         ::= "%" hex hex


unreserved     ::= alpha | digit | safe | extra
uchar          ::= unreserved | escape
xchar          ::= unreserved | reserved | escape
digits         ::= 1*digit

mimetype ::= type "/" subtype
                *(";" parameter)
//                ; Matching of media type and subtype
//                ; is ALWAYS case-insensitive.

type ::= discrete_type | composite_type

discrete_type ::= "text" | "image" | "audio" | "video" |
              "application" | extension_token

composite_type ::= "message" | "multipart" | extension_token

extension_token ::= ietf_token | x_token

ietf_token ::= token

x_token ::= "X-" token | "x-" token

subtype ::= extension_token | iana_token

iana_token ::= token

parameter ::= attribute "=" value

attribute ::= token
//                  ; Matching of attributes
//                  ; is ALWAYS case_insensitive.

value ::= token

token ::= 1*unreserved

tspecials ::=  "(" | ")" | "<" | ">" | "@" |
           "," | ";" | ":" | "\\" |
           "/" | "[" | "]" | "?" | "="
//                   ; Must be in quoted-string,
//                   ; to use within parameter values
