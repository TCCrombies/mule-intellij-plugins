/* The following code was generated by JFlex 1.4.3 on 1/2/16 10:19 PM */

package org.mule.lang.mel.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.mule.lang.mel.parser.psi.MelTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/2/16 10:19 PM from the specification file
 * <tt>/home/machaval/labs/repos/mule-intellij-plugin/mule-esb-plugin/src/main/java/org/mule/lang/mel/parser/_MelLexer.flex</tt>
 */
public class _MelLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\2\1\1\1\0\1\2\1\1\16\6\4\0\1\2\1\37"+
    "\1\17\1\34\1\33\1\36\1\43\1\15\1\24\1\25\1\35\1\20"+
    "\1\22\1\14\1\12\1\5\1\7\11\4\1\23\1\0\1\41\1\40"+
    "\1\42\1\32\1\31\1\3\1\11\2\3\1\13\2\3\1\10\22\3"+
    "\1\26\1\16\1\27\1\53\1\6\1\0\1\45\1\11\1\64\1\47"+
    "\1\55\1\60\1\3\1\67\1\63\2\3\1\61\1\65\1\46\1\50"+
    "\1\66\1\3\1\51\1\62\1\52\1\57\1\3\1\56\3\3\1\30"+
    "\1\44\1\21\1\54\41\6\2\0\4\6\4\0\1\3\2\0\1\6"+
    "\7\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0\u01ca\3"+
    "\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0\160\6"+
    "\5\3\1\0\2\3\2\0\4\3\10\0\1\3\1\0\3\3\1\0"+
    "\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\6\2\0"+
    "\236\3\11\0\46\3\2\0\1\3\7\0\47\3\7\0\1\6\1\0"+
    "\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\10\0"+
    "\33\3\5\0\3\3\15\0\5\6\6\0\1\6\4\0\13\6\5\0"+
    "\53\3\37\6\4\0\2\3\1\6\143\3\1\0\1\3\10\6\1\0"+
    "\6\6\2\3\2\6\1\0\4\6\2\3\12\6\3\3\2\0\1\3"+
    "\17\0\1\6\1\3\1\6\36\3\33\6\2\0\131\3\13\6\1\3"+
    "\16\0\12\6\41\3\11\6\2\3\4\0\1\3\5\0\26\3\4\6"+
    "\1\3\11\6\1\3\3\6\1\3\5\6\22\0\31\3\3\6\104\0"+
    "\1\3\1\0\13\3\67\0\33\6\1\0\4\6\66\3\3\6\1\3"+
    "\22\6\1\3\7\6\12\3\2\6\2\0\12\6\1\0\7\3\1\0"+
    "\7\3\1\0\3\6\1\0\10\3\2\0\2\3\2\0\26\3\1\0"+
    "\7\3\1\0\1\3\3\0\4\3\2\0\1\6\1\3\7\6\2\0"+
    "\2\6\2\0\3\6\1\3\10\0\1\6\4\0\2\3\1\0\3\3"+
    "\2\6\2\0\12\6\2\3\2\6\7\0\1\6\5\0\3\6\1\0"+
    "\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\3\1\0\1\3\7\0\14\6\3\3"+
    "\1\6\13\0\3\6\1\0\11\3\1\0\3\3\1\0\26\3\1\0"+
    "\7\3\1\0\2\3\1\0\5\3\2\0\1\6\1\3\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\3\17\0\2\3\2\6\2\0\12\6"+
    "\1\0\1\6\17\0\3\6\1\0\10\3\2\0\2\3\2\0\26\3"+
    "\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\6\1\3\7\6"+
    "\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\3\1\0\3\3"+
    "\2\6\2\0\12\6\1\0\1\3\20\0\1\6\1\3\1\0\6\3"+
    "\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3\1\0\2\3"+
    "\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\6\3\0\3\6"+
    "\1\0\4\6\2\0\1\3\6\0\1\6\16\0\12\6\11\0\1\6"+
    "\7\0\3\6\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\3\0\1\3\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\2\3\6\0\2\3\2\6\2\0\12\6\22\0\2\6"+
    "\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3\1\0\5\3"+
    "\2\0\1\6\1\3\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\3\1\0\2\3\2\6\2\0\12\6\1\0\2\3\17\0"+
    "\2\6\1\0\10\3\1\0\3\3\1\0\51\3\2\0\1\3\7\6"+
    "\1\0\3\6\1\0\4\6\1\3\10\0\1\6\10\0\2\3\2\6"+
    "\2\0\12\6\12\0\6\3\2\0\2\6\1\0\22\3\3\0\30\3"+
    "\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\3\1\6\2\3"+
    "\7\6\4\0\1\6\7\3\10\6\1\0\12\6\47\0\2\3\1\0"+
    "\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0"+
    "\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0"+
    "\4\3\1\6\2\3\6\6\1\0\2\6\1\3\2\0\5\3\1\0"+
    "\1\3\1\0\6\6\2\0\12\6\2\0\4\3\40\0\1\3\27\0"+
    "\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0"+
    "\2\6\10\3\1\0\44\3\4\0\24\6\1\0\2\6\5\3\13\6"+
    "\1\0\44\6\11\0\1\6\71\0\53\3\24\6\1\3\12\6\6\0"+
    "\6\3\4\6\4\3\3\6\1\3\3\6\2\3\7\6\3\3\4\6"+
    "\15\3\14\6\1\3\17\6\2\0\46\3\1\0\1\3\5\0\1\3"+
    "\2\0\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0\1\3"+
    "\1\0\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3"+
    "\1\0\4\3\2\0\103\3\2\0\3\6\40\0\20\3\20\0\125\3"+
    "\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0\3\6"+
    "\17\0\15\3\1\0\4\3\3\6\13\0\22\3\3\6\13\0\22\3"+
    "\2\6\14\0\15\3\1\0\3\3\1\0\2\6\14\0\64\3\40\6"+
    "\3\0\1\3\3\0\1\6\1\3\1\6\2\0\12\6\41\0\3\6"+
    "\2\0\12\6\6\0\130\3\10\0\51\3\1\6\1\3\5\0\106\3"+
    "\12\0\35\3\3\0\14\6\4\0\14\6\12\0\12\6\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\6\7\3\2\6\6\0\12\6\46\0"+
    "\27\3\5\6\4\0\65\3\12\6\1\0\35\6\2\0\13\6\6\0"+
    "\12\6\15\0\1\3\130\0\5\6\57\3\21\6\7\3\4\0\12\6"+
    "\21\0\11\6\14\0\3\6\36\3\15\6\2\3\12\6\54\3\16\6"+
    "\14\0\44\3\24\6\10\0\12\6\3\0\3\3\12\6\44\3\122\0"+
    "\3\6\1\0\25\6\4\3\1\6\4\3\3\6\2\3\11\0\300\3"+
    "\47\6\25\0\4\6\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3"+
    "\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3"+
    "\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3"+
    "\3\0\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3"+
    "\16\0\5\6\32\0\5\6\20\0\2\6\23\0\1\6\13\0\5\6"+
    "\5\0\6\6\1\0\1\3\15\0\1\3\20\0\15\3\3\0\33\6"+
    "\25\0\15\6\4\0\1\6\3\0\14\6\21\0\1\3\4\0\1\3"+
    "\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3"+
    "\4\0\1\3\21\0\43\6\2\3\4\6\u0a77\0\57\3\1\0\57\3"+
    "\1\0\205\3\6\0\4\3\3\6\2\3\14\0\46\3\1\0\1\3"+
    "\5\0\1\3\2\0\70\3\7\0\1\3\17\0\1\6\27\3\11\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\40\6\57\0\1\3\u01d5\0"+
    "\2\3\1\6\31\0\17\6\1\0\5\3\2\0\3\6\2\3\4\0"+
    "\126\3\2\0\2\6\2\0\3\3\1\0\132\3\1\0\4\3\5\0"+
    "\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0"+
    "\u51cd\3\63\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3\12\6"+
    "\2\3\24\0\57\3\1\6\4\0\12\6\1\0\31\3\7\0\1\6"+
    "\106\3\14\6\45\0\11\3\2\0\147\3\2\0\4\3\1\0\4\3"+
    "\14\0\13\3\115\0\12\3\1\6\3\3\1\6\4\3\1\6\27\3"+
    "\5\6\20\0\1\6\7\0\64\3\14\0\2\6\62\3\21\6\13\0"+
    "\12\6\6\0\22\6\6\3\3\0\1\3\4\0\12\6\34\3\10\6"+
    "\2\0\27\3\15\6\14\0\35\3\3\0\4\6\57\3\16\6\16\0"+
    "\1\3\12\6\46\0\51\3\16\6\11\0\3\3\1\6\10\3\2\6"+
    "\2\0\12\6\6\0\27\3\3\0\1\3\1\6\4\0\60\3\1\6"+
    "\1\3\3\6\2\3\2\6\5\3\2\6\1\3\1\6\1\3\30\0"+
    "\3\3\2\0\13\3\5\6\2\0\3\3\2\6\12\0\6\3\2\0"+
    "\6\3\2\0\6\3\11\0\7\3\1\0\7\3\221\0\43\3\10\6"+
    "\1\0\2\6\2\0\12\6\6\0\u2ba4\3\14\0\27\3\4\0\61\3"+
    "\u2104\0\u016e\3\2\0\152\3\46\0\7\3\14\0\5\3\5\0\1\3"+
    "\1\6\12\3\1\0\15\3\1\0\5\3\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3"+
    "\50\0\14\3\1\6\3\0\20\6\20\0\7\6\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\3\1\0\207\3\2\0\1\6\4\0"+
    "\1\6\13\0\12\6\7\0\32\3\4\0\1\6\1\0\32\3\13\0"+
    "\131\3\3\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0"+
    "\2\6\3\0\2\6\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\6\3\1\37\1\40\4\3\1\41\2\42\1\43\1\0"+
    "\1\44\2\10\2\11\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\4\3\1\56\1\3\1\57"+
    "\6\3\1\60\1\61\1\3\1\62\1\42\1\63\1\64"+
    "\1\65\1\3\1\66\5\3\1\67\2\3\1\70\1\3"+
    "\1\71\1\72\6\3\1\73\1\74\3\3\1\75\2\3"+
    "\1\76\1\77\3\3\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8"+
    "\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\70\0\70"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\70\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\70\0\70\0\u0700\0\u0738\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\250\0\u0850\0\250\0\u0888\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\250\0\u0a10\0\70"+
    "\0\u0a48\0\250\0\250\0\250\0\u0a80\0\250\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\250\0\u0c78"+
    "\0\250\0\250\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8"+
    "\0\250\0\250\0\u0e00\0\u0e38\0\u0e70\0\250\0\u0ea8\0\u0ee0"+
    "\0\250\0\250\0\u0f18\0\u0f50\0\u0f88\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\2\1\7\2\4"+
    "\1\10\1\4\1\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\4\1\53\2\4"+
    "\1\54\4\4\71\0\2\3\70\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\6\4\2\0\13\4"+
    "\4\0\1\5\2\0\1\5\1\55\1\0\1\56\1\57"+
    "\41\0\1\57\11\0\1\55\5\0\1\60\66\0\1\61"+
    "\2\0\1\61\1\55\1\0\1\56\1\57\41\0\1\57"+
    "\11\0\1\55\4\0\1\56\2\0\1\56\74\0\1\62"+
    "\53\0\1\12\1\0\13\12\1\63\1\64\51\12\1\13"+
    "\1\0\14\13\1\65\1\66\50\13\20\0\1\67\107\0"+
    "\1\70\67\0\1\71\67\0\1\72\1\73\66\0\1\74"+
    "\1\0\1\75\70\0\1\76\70\0\1\77\26\0\2\4"+
    "\1\0\4\4\1\0\1\4\17\0\1\4\11\0\1\4"+
    "\1\100\4\4\2\0\13\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\3\4\1\101\2\4"+
    "\2\0\1\102\1\4\1\103\10\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\3\4\1\104"+
    "\2\4\2\0\1\105\12\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\4\4\1\106\1\4"+
    "\2\0\13\4\3\0\2\4\1\0\4\4\1\0\1\4"+
    "\17\0\1\4\11\0\6\4\2\0\1\107\12\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\4\4\1\110\1\4\2\0\13\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\6\4\2\0"+
    "\4\4\1\111\6\4\3\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\6\4\2\0\12\4\1\112"+
    "\3\0\2\4\1\0\4\4\1\0\1\4\17\0\1\4"+
    "\11\0\1\113\2\4\1\114\2\4\2\0\13\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\1\4\1\115\4\4\2\0\3\4\1\116\4\4\1\117"+
    "\2\4\4\0\1\56\2\0\1\56\1\0\1\120\1\0"+
    "\1\57\41\0\1\57\16\0\1\121\2\0\1\121\1\0"+
    "\1\120\2\0\1\121\3\0\1\121\47\0\1\60\1\0"+
    "\66\60\4\0\1\61\2\0\1\61\2\0\1\56\1\57"+
    "\41\0\1\57\12\0\1\12\1\0\66\12\1\13\1\0"+
    "\66\13\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\2\4\1\122\3\4\2\0\13\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\5\4\1\123\2\0\13\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\6\4\2\0\1\4"+
    "\1\124\11\4\3\0\2\4\1\0\4\4\1\0\1\4"+
    "\17\0\1\4\11\0\6\4\2\0\4\4\1\125\6\4"+
    "\3\0\2\4\1\0\4\4\1\0\1\4\17\0\1\4"+
    "\11\0\6\4\2\0\3\4\1\126\7\4\3\0\2\4"+
    "\1\0\4\4\1\0\1\4\17\0\1\4\11\0\5\4"+
    "\1\127\2\0\13\4\3\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\6\4\2\0\2\4\1\130"+
    "\10\4\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\6\4\2\0\5\4\1\131\5\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\6\4\2\0\6\4\1\132\4\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\6\4\2\0"+
    "\4\4\1\133\6\4\3\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\4\4\1\134\1\4\2\0"+
    "\13\4\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\6\4\2\0\5\4\1\135\5\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\6\4\2\0\11\4\1\136\1\4\4\0\1\121\2\0"+
    "\1\121\1\0\1\120\61\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\6\4\2\0\4\4\1\137"+
    "\6\4\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\6\4\2\0\2\4\1\140\10\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\6\4\2\0\1\141\12\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\6\4\2\0\1\142"+
    "\12\4\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\6\4\2\0\4\4\1\143\6\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\6\4\2\0\5\4\1\144\5\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\6\4\2\0"+
    "\1\145\12\4\3\0\2\4\1\0\4\4\1\0\1\4"+
    "\17\0\1\4\11\0\5\4\1\146\2\0\13\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\3\4\1\147\2\4\2\0\13\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\4\4\1\150"+
    "\1\4\2\0\13\4\3\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\6\4\2\0\1\151\12\4"+
    "\3\0\2\4\1\0\4\4\1\0\1\4\17\0\1\4"+
    "\11\0\6\4\2\0\1\152\12\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\1\153\5\4"+
    "\2\0\13\4\3\0\2\4\1\0\4\4\1\0\1\4"+
    "\17\0\1\4\11\0\1\154\5\4\2\0\13\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\4\4\1\155\1\4\2\0\13\4\3\0\2\4\1\0"+
    "\4\4\1\0\1\4\17\0\1\4\11\0\1\4\1\156"+
    "\4\4\2\0\13\4\3\0\2\4\1\0\4\4\1\0"+
    "\1\4\17\0\1\4\11\0\6\4\2\0\7\4\1\157"+
    "\3\4\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\1\4\1\160\4\4\2\0\13\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\5\4\1\161\2\0\13\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\6\4\2\0\12\4"+
    "\1\162\3\0\2\4\1\0\4\4\1\0\1\4\17\0"+
    "\1\4\11\0\6\4\2\0\7\4\1\163\3\4\3\0"+
    "\2\4\1\0\4\4\1\0\1\4\17\0\1\4\11\0"+
    "\6\4\2\0\1\164\12\4\3\0\2\4\1\0\4\4"+
    "\1\0\1\4\17\0\1\4\11\0\3\4\1\165\2\4"+
    "\2\0\13\4\3\0\2\4\1\0\4\4\1\0\1\4"+
    "\17\0\1\4\11\0\6\4\2\0\3\4\1\166\7\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\16\11\14\1\2\11\4\1\1\11"+
    "\3\1\1\0\2\11\2\1\12\11\20\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MelLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MelLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return MINUS_MINUS;
          }
        case 65: break;
        case 21: 
          { return DOLLAR;
          }
        case 66: break;
        case 49: 
          { return IF;
          }
        case 67: break;
        case 15: 
          { return RPARENTH;
          }
        case 68: break;
        case 57: 
          { return TRUE_KEYWORD;
          }
        case 69: break;
        case 40: 
          { return LESS_EQUAL;
          }
        case 70: break;
        case 54: 
          { return DEF;
          }
        case 71: break;
        case 4: 
          { return INTEGER_LITERAL;
          }
        case 72: break;
        case 18: 
          { return LBRACE;
          }
        case 73: break;
        case 44: 
          { return AND_AND;
          }
        case 74: break;
        case 11: 
          { return RBRACE;
          }
        case 75: break;
        case 50: 
          { return BIG_DECIMAL_LITERAL;
          }
        case 76: break;
        case 8: 
          { return CHARACTER_LITERAL;
          }
        case 77: break;
        case 31: 
          { return XOR;
          }
        case 78: break;
        case 53: 
          { return NEW_KEYWORD;
          }
        case 79: break;
        case 51: 
          { return AND_KEYWORD;
          }
        case 80: break;
        case 17: 
          { return RBRACKET;
          }
        case 81: break;
        case 45: 
          { return OR_OR;
          }
        case 82: break;
        case 12: 
          { return COMMA;
          }
        case 83: break;
        case 47: 
          { return OR_KEYWORD;
          }
        case 84: break;
        case 43: 
          { return SHIFT_RIGHT;
          }
        case 85: break;
        case 27: 
          { return LESS;
          }
        case 86: break;
        case 6: 
          { return DOT;
          }
        case 87: break;
        case 19: 
          { return AT;
          }
        case 88: break;
        case 38: 
          { return NOT_EQUAL;
          }
        case 89: break;
        case 48: 
          { return IN;
          }
        case 90: break;
        case 22: 
          { return HASH;
          }
        case 91: break;
        case 30: 
          { return OR;
          }
        case 92: break;
        case 9: 
          { return STRING_LITERAL;
          }
        case 93: break;
        case 23: 
          { return MULTIPLY;
          }
        case 94: break;
        case 14: 
          { return LPARENTH;
          }
        case 95: break;
        case 41: 
          { return SHIFT_LEFT;
          }
        case 96: break;
        case 13: 
          { return COLON;
          }
        case 97: break;
        case 29: 
          { return AND;
          }
        case 98: break;
        case 32: 
          { return NOT;
          }
        case 99: break;
        case 62: 
          { return IMPORT;
          }
        case 100: break;
        case 42: 
          { return GREATER_EQUAL;
          }
        case 101: break;
        case 5: 
          { return DIVISION;
          }
        case 102: break;
        case 24: 
          { return MODULO;
          }
        case 103: break;
        case 35: 
          { return LINE_COMMENT;
          }
        case 104: break;
        case 34: 
          { return DOUBLE_LITERAL;
          }
        case 105: break;
        case 46: 
          { return DO;
          }
        case 106: break;
        case 28: 
          { return GREATER;
          }
        case 107: break;
        case 58: 
          { return ELSE;
          }
        case 108: break;
        case 61: 
          { return RETURN;
          }
        case 109: break;
        case 60: 
          { return FALSE_KEYWORD;
          }
        case 110: break;
        case 59: 
          { return WHILE;
          }
        case 111: break;
        case 16: 
          { return LBRACKET;
          }
        case 112: break;
        case 25: 
          { return NEGATE;
          }
        case 113: break;
        case 7: 
          { return MINUS;
          }
        case 114: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 115: break;
        case 55: 
          { return FOR;
          }
        case 116: break;
        case 64: 
          { return INSTANCEOF_KEYWORD;
          }
        case 117: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 118: break;
        case 26: 
          { return EQ;
          }
        case 119: break;
        case 63: 
          { return FOREACH;
          }
        case 120: break;
        case 33: 
          { return BIG_INTEGER_LITERAL;
          }
        case 121: break;
        case 10: 
          { return PLUS;
          }
        case 122: break;
        case 39: 
          { return EQUAL;
          }
        case 123: break;
        case 20: 
          { return QUESTION;
          }
        case 124: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 125: break;
        case 56: 
          { return NULL_KEYWORD;
          }
        case 126: break;
        case 52: 
          { return NOT_KEYWORD;
          }
        case 127: break;
        case 37: 
          { return PLUS_PLUS;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
